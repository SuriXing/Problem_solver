---
description: my rule
globs: 
---
# RULE 101
## Never cut my feature or simplify my UI layout without my permission
## All the testing code or debug code, please put into debug menu
## Never hard code configuraiton, strings. Put them into right place, or ask me
### for strings, keep updating all the language files
## Website's English name is Anon Coffee, Chinese name is 解忧杂货铺， Japanese name is 憂い解き雑貨店, Korean name is ​걱정 해결 잡화점, Spanish name is Café Anónimo

# Project Rules and Coding Standards

## 1. Code Organization

### Directory Structure
- `src/components/`: React components
  - `src/components/pages/`: Page-level components
  - `src/components/layout/`: Layout components
- `src/utils/`: Utility functions and helpers
- `src/services/`: Service layer for API interactions
- `src/types/`: TypeScript type definitions
- `src/assets/`: Static assets (images, CSS)
- `src/locales/`: Internationalization files

### File Naming
- React components: PascalCase (e.g., `HomePage.tsx`)
- Utility files: camelCase (e.g., `translationHelper.ts`)
- CSS modules: ComponentName.module.css (e.g., `HomePage.module.css`)

## 2. Coding Standards

### General
- Use TypeScript for type safety
- Prefer functional components with hooks over class components
- Keep components focused on a single responsibility
- Extract reusable logic into custom hooks

### Internationalization
- All user-facing strings must use the i18n system
- Use the `useTypeSafeTranslation` hook for translations
- Translation keys should be descriptive and follow a logical structure
- Add new keys to all language files when adding new text

### State Management
- Use React hooks for component state
- Prefer local component state when possible
- Use context for global state that needs to be accessed by multiple components

### Styling
- Use CSS modules for component styling
- Follow BEM-like naming convention for CSS classes
- Use responsive design principles

## 3. Database Interactions

### Supabase
- All database interactions should go through the `DatabaseService`
- Use typed responses with the defined database types
- Handle errors gracefully and provide user feedback
- Use access codes for secure data retrieval

### Security
- Never expose sensitive information in URLs
- Use POST requests for sensitive operations
- Store access codes in sessionStorage, not in URLs
- Validate all user inputs

## 4. Testing

### Unit Tests
- Write tests for utility functions and hooks
- Use React Testing Library for component tests
- Focus on testing behavior, not implementation details

### E2E Tests
- Use Cypress for end-to-end testing
- Test critical user flows
- Include visual regression tests for UI components

## 5. Git Workflow

### Branches
- `main`: Production-ready code
- `develop`: Integration branch for features
- Feature branches: `feature/feature-name`
- Bug fixes: `fix/bug-description`

### Commits
- Write clear, concise commit messages
- Reference issue numbers when applicable
- Keep commits focused on a single change

### Pull Requests
- Provide a clear description of changes
- Include screenshots for UI changes
- Ensure all tests pass before merging
- Request code reviews from team members

## 6. Deployment

### GitHub Pages
- The application is deployed to GitHub Pages
- Use the `npm run deploy` script for deployment
- Ensure the `homepage` field in package.json is correct
- Test the production build locally before deployment

## 7. Documentation

### Code Documentation
- Use JSDoc comments for functions and components
- Document complex logic and algorithms
- Keep comments up-to-date with code changes

### Project Documentation
- Update README.md with new features and changes
- Document environment setup requirements
- Include troubleshooting guides for common issues

## 8. Performance

### Optimization
- Use React.memo for expensive components
- Implement code splitting for large bundles
- Optimize images and assets
- Monitor and improve load times

### Accessibility
- Ensure proper semantic HTML
- Include ARIA attributes where needed
- Test with screen readers
- Maintain keyboard navigation support